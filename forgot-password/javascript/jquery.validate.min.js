/*!
 * jQuery Validation Plugin 1.12.0pre
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright 2013 JÃ¶rn Zaefferer
 * Released under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 */
! function(u) {
    u.extend(u.fn, {
        validate: function(t) {
            var i;
            if (this.length) return (i = u.data(this[0], "validator")) || (this.attr("novalidate", "novalidate"), i = new u.validator(t, this[0]), u.data(this[0], "validator", i), i.settings.onsubmit && (this.validateDelegate(":submit", "click", function(t) {
                i.settings.submitHandler && (i.submitButton = t.target), u(t.target).hasClass("cancel") && (i.cancelSubmit = !0), void 0 !== u(t.target).attr("formnovalidate") && (i.cancelSubmit = !0)
            }), this.submit(function(e) {
                function t() {
                    var t;
                    return !i.settings.submitHandler || (i.submitButton && (t = u("<input type='hidden'/>").attr("name", i.submitButton.name).val(u(i.submitButton).val()).appendTo(i.currentForm)), i.settings.submitHandler.call(i, i.currentForm, e), i.submitButton && t.remove(), !1)
                }
                return i.settings.debug && e.preventDefault(), i.cancelSubmit ? (i.cancelSubmit = !1, t()) : i.form() ? i.pendingRequest ? !(i.formSubmitted = !0) : t() : (i.focusInvalid(), !1)
            }))), i;
            t && t.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing.")
        },
        valid: function() {
            var t, e;
            return u(this[0]).is("form") ? this.validate().form() : (t = !0, e = u(this[0].form).validate(), this.each(function() {
                t = t && e.element(this)
            }), t)
        },
        removeAttrs: function(t) {
            var i = {},
                s = this;
            return u.each(t.split(/\s/), function(t, e) {
                i[e] = s.attr(e), s.removeAttr(e)
            }), i
        },
        rules: function(t, e) {
            var i = this[0];
            if (t) {
                var s, n = u.data(i.form, "validator").settings,
                    r = n.rules,
                    a = u.validator.staticRules(i);
                switch (t) {
                    case "add":
                        u.extend(a, u.validator.normalizeRule(e)), delete a.messages, r[i.name] = a, e.messages && (n.messages[i.name] = u.extend(n.messages[i.name], e.messages));
                        break;
                    case "remove":
                        return e ? (s = {}, u.each(e.split(/\s/), function(t, e) {
                            s[e] = a[e], delete a[e]
                        }), s) : (delete r[i.name], a)
                }
            }
            var o, t = u.validator.normalizeRules(u.extend({}, u.validator.classRules(i), u.validator.attributeRules(i), u.validator.dataRules(i), u.validator.staticRules(i)), i);
            return t.required && (o = t.required, delete t.required, t = u.extend({
                required: o
            }, t)), t
        }
    }), u.extend(u.expr[":"], {
        blank: function(t) {
            return !u.trim("" + u(t).val())
        },
        filled: function(t) {
            return !!u.trim("" + u(t).val())
        },
        unchecked: function(t) {
            return !u(t).prop("checked")
        }
    }), u.validator = function(t, e) {
        this.settings = u.extend(!0, {}, u.validator.defaults, t), this.currentForm = e, this.init()
    }, u.validator.format = function(i, t) {
        return 1 === arguments.length ? function() {
            var t = u.makeArray(arguments);
            return t.unshift(i), u.validator.format.apply(this, t)
        } : ((t = 2 < arguments.length && t.constructor !== Array ? u.makeArray(arguments).slice(1) : t).constructor !== Array && (t = [t]), u.each(t, function(t, e) {
            i = i.replace(new RegExp("\\{" + t + "\\}", "g"), function() {
                return e
            })
        }), i)
    }, u.extend(u.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusInvalid: !0,
            errorContainer: u([]),
            errorLabelContainer: u([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function(t, e) {
                this.lastActive = t, this.settings.focusCleanup && !this.blockFocusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, t, this.settings.errorClass, this.settings.validClass), this.addWrapper(this.errorsFor(t)).hide())
            },
            onfocusout: function(t, e) {
                this.checkable(t) || !(t.name in this.submitted) && this.optional(t) || this.element(t)
            },
            onkeyup: function(t, e) {
                9 === e.which && "" === this.elementValue(t) || (t.name in this.submitted || t === this.lastElement) && this.element(t)
            },
            onclick: function(t, e) {
                t.name in this.submitted ? this.element(t) : t.parentNode.name in this.submitted && this.element(t.parentNode)
            },
            highlight: function(t, e, i) {
                ("radio" === t.type ? this.findByName(t.name) : u(t)).addClass(e).removeClass(i)
            },
            unhighlight: function(t, e, i) {
                ("radio" === t.type ? this.findByName(t.name) : u(t)).removeClass(e).addClass(i)
            }
        },
        setDefaults: function(t) {
            u.extend(u.validator.defaults, t)
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            maxlength: u.validator.format("Please enter no more than {0} characters."),
            minlength: u.validator.format("Please enter at least {0} characters."),
            rangelength: u.validator.format("Please enter a value between {0} and {1} characters long."),
            range: u.validator.format("Please enter a value between {0} and {1}."),
            max: u.validator.format("Please enter a value less than or equal to {0}."),
            min: u.validator.format("Please enter a value greater than or equal to {0}.")
        },
        autoCreateRanges: !1,
        prototype: {
            init: function() {
                this.labelContainer = u(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || u(this.currentForm), this.containers = u(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset();
                var s = this.groups = {},
                    i = (u.each(this.settings.groups, function(i, t) {
                        "string" == typeof t && (t = t.split(/\s/)), u.each(t, function(t, e) {
                            s[e] = i
                        })
                    }), this.settings.rules);

                function t(t) {
                    var e = u.data(this[0].form, "validator"),
                        i = "on" + t.type.replace(/^validate/, "");
                    e.settings[i] && e.settings[i].call(e, this[0], t)
                }
                u.each(i, function(t, e) {
                    i[t] = u.validator.normalizeRule(e)
                }), u(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ", "focusin focusout keyup", t).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", t), this.settings.invalidHandler && u(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler)
            },
            form: function() {
                return this.checkForm(), u.extend(this.submitted, this.errorMap), this.invalid = u.extend({}, this.errorMap), this.valid() || u(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid()
            },
            checkForm: function() {
                this.prepareForm();
                for (var t = 0, e = this.currentElements = this.elements(); e[t]; t++) this.check(e[t]);
                return this.valid()
            },
            element: function(t) {
                t = this.validationTargetFor(this.clean(t)), this.lastElement = t, this.prepareElement(t), this.currentElements = u(t);
                var e = !1 !== this.check(t);
                return e ? delete this.invalid[t.name] : this.invalid[t.name] = !0, this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), e
            },
            showErrors: function(e) {
                if (e) {
                    for (var t in u.extend(this.errorMap, e), this.errorList = [], e) this.errorList.push({
                        message: e[t],
                        element: this.findByName(t)[0]
                    });
                    this.successList = u.grep(this.successList, function(t) {
                        return !(t.name in e)
                    })
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors()
            },
            resetForm: function() {
                u.fn.resetForm && u(this.currentForm).resetForm(), this.submitted = {}, this.lastElement = null, this.prepareForm(), this.hideErrors(), this.elements().removeClass(this.settings.errorClass).removeData("previousValue")
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid)
            },
            objectLength: function(t) {
                var e, i = 0;
                for (e in t) i++;
                return i
            },
            hideErrors: function() {
                this.addWrapper(this.toHide).hide()
            },
            valid: function() {
                return 0 === this.size()
            },
            size: function() {
                return this.errorList.length
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) try {
                    u(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin")
                } catch (t) {}
            },
            findLastActive: function() {
                var e = this.lastActive;
                return e && 1 === u.grep(this.errorList, function(t) {
                    return t.element.name === e.name
                }).length && e
            },
            elements: function() {
                var t = this,
                    e = {};
                return u(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
                    return !this.name && t.settings.debug && window.console && console.error("%o has no name assigned", this), !(this.name in e || !t.objectLength(u(this).rules())) && (e[this.name] = !0)
                })
            },
            clean: function(t) {
                return u(t)[0]
            },
            errors: function() {
                var t = this.settings.errorClass.replace(" ", ".");
                return u(this.settings.errorElement + "." + t, this.errorContext)
            },
            reset: function() {
                this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = u([]), this.toHide = u([]), this.currentElements = u([])
            },
            prepareForm: function() {
                this.reset(), this.toHide = this.errors().add(this.containers)
            },
            prepareElement: function(t) {
                this.reset(), this.toHide = this.errorsFor(t)
            },
            elementValue: function(t) {
                var e = u(t).attr("type"),
                    i = u(t).val();
                return "radio" === e || "checkbox" === e ? u("input[name='" + u(t).attr("name") + "']:checked").val() : "string" == typeof i ? i.replace(/\r/g, "") : i
            },
            check: function(e) {
                e = this.validationTargetFor(this.clean(e));
                var t, i, s = u(e).rules(),
                    n = !1,
                    r = this.elementValue(e);
                for (i in s) {
                    var a = {
                        method: i,
                        parameters: s[i]
                    };
                    try {
                        if ("dependency-mismatch" === (t = u.validator.methods[i].call(this, r, e, a.parameters))) n = !0;
                        else {
                            if (n = !1, "pending" === t) return void(this.toHide = this.toHide.not(this.errorsFor(e)));
                            if (!t) return this.formatAndAdd(e, a), !1
                        }
                    } catch (t) {
                        throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + e.id + ", check the '" + a.method + "' method.", t), t
                    }
                }
                if (!n) return this.objectLength(s) && this.successList.push(e), !0
            },
            customDataMessage: function(t, e) {
                return u(t).data("msg-" + e.toLowerCase()) || t.attributes && u(t).attr("data-msg-" + e.toLowerCase())
            },
            customMessage: function(t, e) {
                t = this.settings.messages[t];
                return t && (t.constructor === String ? t : t[e])
            },
            findDefined: function() {
                for (var t = 0; t < arguments.length; t++)
                    if (void 0 !== arguments[t]) return arguments[t]
            },
            defaultMessage: function(t, e) {
                return this.findDefined(this.customMessage(t.name, e), this.customDataMessage(t, e), !this.settings.ignoreTitle && t.title || void 0, u.validator.messages[e], "<strong>Warning: No message defined for " + t.name + "</strong>")
            },
            formatAndAdd: function(t, e) {
                var i = this.defaultMessage(t, e.method),
                    s = /\$?\{(\d+)\}/g;
                "function" == typeof i ? i = i.call(this, e.parameters, t) : s.test(i) && (i = u.validator.format(i.replace(s, "{$1}"), e.parameters)), this.errorList.push({
                    message: i,
                    element: t
                }), this.errorMap[t.name] = i, this.submitted[t.name] = i
            },
            addWrapper: function(t) {
                return t = this.settings.wrapper ? t.add(t.parent(this.settings.wrapper)) : t
            },
            defaultShowErrors: function() {
                for (var t, e = 0; this.errorList[e]; e++) {
                    var i = this.errorList[e];
                    this.settings.highlight && this.settings.highlight.call(this, i.element, this.settings.errorClass, this.settings.validClass), this.showLabel(i.element, i.message)
                }
                if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success)
                    for (e = 0; this.successList[e]; e++) this.showLabel(this.successList[e]);
                if (this.settings.unhighlight)
                    for (e = 0, t = this.validElements(); t[e]; e++) this.settings.unhighlight.call(this, t[e], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show()
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements())
            },
            invalidElements: function() {
                return u(this.errorList).map(function() {
                    return this.element
                })
            },
            showLabel: function(t, e) {
                var i = this.errorsFor(t);
                i.length ? (i.removeClass(this.settings.validClass).addClass(this.settings.errorClass), i.html(e)) : (i = u("<" + this.settings.errorElement + ">").attr("for", this.idOrName(t)).addClass(this.settings.errorClass).html(e || ""), this.settings.wrapper && (i = i.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.append(i).length || (this.settings.errorPlacement ? this.settings.errorPlacement(i, u(t)) : i.insertAfter(t))), !e && this.settings.success && (i.text(""), "string" == typeof this.settings.success ? i.addClass(this.settings.success) : this.settings.success(i, t)), this.toShow = this.toShow.add(i)
            },
            errorsFor: function(t) {
                var e = this.idOrName(t);
                return this.errors().filter(function() {
                    return u(this).attr("for") === e
                })
            },
            idOrName: function(t) {
                return this.groups[t.name] || !this.checkable(t) && t.id || t.name
            },
            validationTargetFor: function(t) {
                return t = this.checkable(t) ? this.findByName(t.name).not(this.settings.ignore)[0] : t
            },
            checkable: function(t) {
                return /radio|checkbox/i.test(t.type)
            },
            findByName: function(t) {
                return u(this.currentForm).find("[name='" + t + "']")
            },
            getLength: function(t, e) {
                switch (e.nodeName.toLowerCase()) {
                    case "select":
                        return u("option:selected", e).length;
                    case "input":
                        if (this.checkable(e)) return this.findByName(e.name).filter(":checked").length
                }
                return t.length
            },
            depend: function(t, e) {
                return !this.dependTypes[typeof t] || this.dependTypes[typeof t](t, e)
            },
            dependTypes: {
                boolean: function(t, e) {
                    return t
                },
                string: function(t, e) {
                    return !!u(t, e.form).length
                },
                function: function(t, e) {
                    return t(e)
                }
            },
            optional: function(t) {
                var e = this.elementValue(t);
                return !u.validator.methods.required.call(this, e, t) && "dependency-mismatch"
            },
            startRequest: function(t) {
                this.pending[t.name] || (this.pendingRequest++, this.pending[t.name] = !0)
            },
            stopRequest: function(t, e) {
                this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[t.name], e && 0 === this.pendingRequest && this.formSubmitted && this.form() ? (u(this.currentForm).submit(), this.formSubmitted = !1) : !e && 0 === this.pendingRequest && this.formSubmitted && (u(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1)
            },
            previousValue: function(t) {
                return u.data(t, "previousValue") || u.data(t, "previousValue", {
                    old: null,
                    valid: !0,
                    message: this.defaultMessage(t, "remote")
                })
            }
        },
        classRuleSettings: {
            required: {
                required: !0
            },
            email: {
                email: !0
            },
            url: {
                url: !0
            },
            date: {
                date: !0
            },
            dateISO: {
                dateISO: !0
            },
            number: {
                number: !0
            },
            digits: {
                digits: !0
            },
            creditcard: {
                creditcard: !0
            }
        },
        addClassRules: function(t, e) {
            t.constructor === String ? this.classRuleSettings[t] = e : u.extend(this.classRuleSettings, t)
        },
        classRules: function(t) {
            var e = {},
                t = u(t).attr("class");
            return t && u.each(t.split(" "), function() {
                this in u.validator.classRuleSettings && u.extend(e, u.validator.classRuleSettings[this])
            }), e
        },
        attributeRules: function(t) {
            var e, i = {},
                s = u(t),
                n = s[0].getAttribute("type");
            for (e in u.validator.methods) {
                var r = "required" === e ? !!(r = "" === (r = s.get(0).getAttribute(e)) ? !0 : r) : s.attr(e);
                (r = /min|max/.test(e) && (null === n || /number|range|text/.test(n)) ? Number(r) : r) ? i[e] = r: n === e && "range" !== n && (i[e] = !0)
            }
            return i.maxlength && /-1|2147483647|524288/.test(i.maxlength) && delete i.maxlength, i
        },
        dataRules: function(t) {
            var e, i, s = {},
                n = u(t);
            for (e in u.validator.methods) void 0 !== (i = n.data("rule-" + e.toLowerCase())) && (s[e] = i);
            return s
        },
        staticRules: function(t) {
            var e = {},
                i = u.data(t.form, "validator");
            return e = i.settings.rules ? u.validator.normalizeRule(i.settings.rules[t.name]) || {} : e
        },
        normalizeRules: function(s, n) {
            return u.each(s, function(t, e) {
                if (!1 === e) delete s[t];
                else if (e.param || e.depends) {
                    var i = !0;
                    switch (typeof e.depends) {
                        case "string":
                            i = !!u(e.depends, n.form).length;
                            break;
                        case "function":
                            i = e.depends.call(n, n)
                    }
                    i ? s[t] = void 0 === e.param || e.param : delete s[t]
                }
            }), u.each(s, function(t, e) {
                s[t] = u.isFunction(e) ? e(n) : e
            }), u.each(["minlength", "maxlength"], function() {
                s[this] && (s[this] = Number(s[this]))
            }), u.each(["rangelength", "range"], function() {
                var t;
                s[this] && (u.isArray(s[this]) ? s[this] = [Number(s[this][0]), Number(s[this][1])] : "string" == typeof s[this] && (t = s[this].split(/[\s,]+/), s[this] = [Number(t[0]), Number(t[1])]))
            }), u.validator.autoCreateRanges && (s.min && s.max && (s.range = [s.min, s.max], delete s.min, delete s.max), s.minlength) && s.maxlength && (s.rangelength = [s.minlength, s.maxlength], delete s.minlength, delete s.maxlength), s
        },
        normalizeRule: function(t) {
            var e;
            return "string" == typeof t && (e = {}, u.each(t.split(/\s/), function() {
                e[this] = !0
            }), t = e), t
        },
        addMethod: function(t, e, i) {
            u.validator.methods[t] = e, u.validator.messages[t] = void 0 !== i ? i : u.validator.messages[t], e.length < 3 && u.validator.addClassRules(t, u.validator.normalizeRule(t))
        },
        methods: {
            required: function(t, e, i) {
                return this.depend(i, e) ? "select" === e.nodeName.toLowerCase() ? (i = u(e).val()) && 0 < i.length : this.checkable(e) ? 0 < this.getLength(t, e) : 0 < u.trim(t).length : "dependency-mismatch"
            },
            email: function(t, e) {
                return this.optional(e) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(t)
            },
            url: function(t, e) {
                return this.optional(e) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(t)
            },
            date: function(t, e) {
                return this.optional(e) || !/Invalid|NaN/.test(new Date(t).toString())
            },
            dateISO: function(t, e) {
                return this.optional(e) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(t)
            },
            number: function(t, e) {
                return this.optional(e) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)
            },
            digits: function(t, e) {
                return this.optional(e) || /^\d+$/.test(t)
            },
            creditcard: function(t, e) {
                if (this.optional(e)) return "dependency-mismatch";
                if (/[^0-9 \-]+/.test(t)) return !1;
                for (var i = 0, s = 0, n = !1, r = (t = t.replace(/\D/g, "")).length - 1; 0 <= r; r--) {
                    var a = t.charAt(r),
                        s = parseInt(a, 10);
                    n && 9 < (s *= 2) && (s -= 9), i += s, n = !n
                }
                return i % 10 == 0
            },
            minlength: function(t, e, i) {
                t = u.isArray(t) ? t.length : this.getLength(u.trim(t), e);
                return this.optional(e) || i <= t
            },
            maxlength: function(t, e, i) {
                t = u.isArray(t) ? t.length : this.getLength(u.trim(t), e);
                return this.optional(e) || t <= i
            },
            rangelength: function(t, e, i) {
                t = u.isArray(t) ? t.length : this.getLength(u.trim(t), e);
                return this.optional(e) || t >= i[0] && t <= i[1]
            },
            min: function(t, e, i) {
                return this.optional(e) || i <= t
            },
            max: function(t, e, i) {
                return this.optional(e) || t <= i
            },
            range: function(t, e, i) {
                return this.optional(e) || t >= i[0] && t <= i[1]
            },
            equalTo: function(t, e, i) {
                i = u(i);
                return this.settings.onfocusout && i.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                    u(e).valid()
                }), t === i.val()
            },
            remote: function(s, n, t) {
                if (this.optional(n)) return "dependency-mismatch";
                var r = this.previousValue(n);
                if (this.settings.messages[n.name] || (this.settings.messages[n.name] = {}), r.originalMessage = this.settings.messages[n.name].remote, this.settings.messages[n.name].remote = r.message, t = "string" == typeof t ? {
                        url: t
                    } : t, r.old === s) return r.valid;
                r.old = s;
                var a = this,
                    e = (this.startRequest(n), {});
                return e[n.name] = s, u.ajax(u.extend(!0, {
                    url: t,
                    mode: "abort",
                    port: "validate" + n.name,
                    dataType: "json",
                    data: e,
                    success: function(t) {
                        a.settings.messages[n.name].remote = r.originalMessage;
                        var e, i = !0 === t || "true" === t;
                        i ? (e = a.formSubmitted, a.prepareElement(n), a.formSubmitted = e, a.successList.push(n), delete a.invalid[n.name], a.showErrors()) : (e = {}, t = t || a.defaultMessage(n, "remote"), e[n.name] = r.message = u.isFunction(t) ? t(s) : t, a.invalid[n.name] = !0, a.showErrors(e)), r.valid = i, a.stopRequest(n, i)
                    }
                }, t)), "pending"
            }
        }
    }), u.format = u.validator.format
}(jQuery),
function(s) {
    var n, r = {};
    s.ajaxPrefilter ? s.ajaxPrefilter(function(t, e, i) {
        var s = t.port;
        "abort" === t.mode && (r[s] && r[s].abort(), r[s] = i)
    }) : (n = s.ajax, s.ajax = function(t) {
        var e = ("mode" in t ? t : s.ajaxSettings).mode,
            i = ("port" in t ? t : s.ajaxSettings).port;
        return "abort" === e ? (r[i] && r[i].abort(), r[i] = n.apply(this, [t]), r[i]) : n.apply(this, [t])
    })
}(jQuery),
function(n) {
    n.extend(n.fn, {
        validateDelegate: function(i, t, s) {
            return this.bind(t, function(t) {
                var e = n(t.target);
                if (e.is(i)) return s.apply(e, [t])
            })
        }
    })
}(jQuery);